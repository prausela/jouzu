{"version":3,"sources":["UI/main_menu/MainMenuUI.js","UI/MainMenuController.js","UI/game/AnswerUI.js","UI/game/MenuUI.js","UI/game/GameUI.js","data/access/KanjiToHiraganaDAO.js","data/access/_QuestionsWithPossibleAnswersDAO.js","logic/RandomService.js","logic/KanjiToHiraganaService.js","UI/GameController.js","UI/Interface.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["MainMenuUI","props","switchToGame","className","Button","variant","onClick","active","disabled","MainMenuController","switchToGameMode","AnswerUI","text","submitAnswer","MenuUI","correct","incorrect","resetGame","returnToMenu","GameUI","question","answers","id","ans1","ans2","ans3","ans4","map","ans","KanjiToHiraganaDAO","store","getQuestions","getPossibleAnswers","answerObject","find","correct_answer","other_answers","_QuestionsWithPossibleAnswersDAO","KanjiToHiragana","RandomService","getRandomInt","start","end","Math","floor","random","withInPositionX","x","what","collection","newCollection","j","i","push","KanjiToHiraganaService","startNewGame","questions","getNextQuestion","length","answerData","wrongAnswers","from","answer","taken","Set","size","possibleAnswer","has","add","getXDifferentFrom","correctAnswerPosition","checkIfCorrectAnswer","GameController","gameData","useRef","useState","setCorrect","setIncorrect","setId","setQuestion","setAns1","setAns2","setAns3","setAns4","loadNextQuestion","nextQuestion","current","useEffect","selectedAns","Interface","interfaces","controller","currInterface","setCurrInterface","Controller","gameMode","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"qPAmBeA,EAdI,SAACC,GAChB,IAAMC,EAAeD,EAAMC,aAC3B,OACI,qCACI,qBAAKC,UAAU,oCAAf,SACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,eAAeC,QAASJ,EAAcK,QAAM,EAA5D,sBAEJ,qBAAKJ,UAAU,oCAAf,SACI,eAACC,EAAA,EAAD,CAAQC,QAAQ,eAAeG,UAAQ,EAAvC,yBAA+C,uBAAM,4DCDtDC,EATY,SAACR,GAExB,OACI,cAAC,EAAD,CACIC,aAHa,kBAAMD,EAAMS,iBAAiB,YCUvCC,EAXE,SAACV,GACd,IAAME,EAAgBF,EAAME,UAAYF,EAAME,UAAY,kBAAoB,iBACxES,EAAgBX,EAAMW,KAE5B,OACI,qBAAKT,UAAWA,EAAhB,SACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,eAAeC,QAHjB,kBAAML,EAAMY,aAAaD,IAGeL,QAAM,EAA5D,SAA8DK,OCe3DE,EArBA,SAACb,GACZ,IAAMc,EAAed,EAAMc,QAAUd,EAAMc,QAAU,EAC/CC,EAAef,EAAMe,UAAYf,EAAMe,UAAY,EACnDC,EAAehB,EAAMgB,UACrBC,EAAejB,EAAMiB,aAC3B,OACI,sBAAKf,UAAU,cAAf,UACI,qBAAKA,UAAU,gCAAf,SACI,eAACC,EAAA,EAAD,CAAQC,QAAQ,eAAeC,QAASY,EAAcX,QAAM,EAA5D,mBAA8D,uBAA9D,cAEJ,sBAAKJ,UAAU,qBAAf,UACI,qBAAKA,UAAU,mBAAf,SAAkC,sBAAKA,UAAU,kCAAf,iBAAqD,uBAAOY,OAC9F,qBAAKZ,UAAU,mBAAf,SAAkC,sBAAKA,UAAU,iCAAf,gBAAmD,uBAAOa,UAEhG,qBAAKb,UAAU,6EAAf,SACI,eAACC,EAAA,EAAD,CAAQC,QAAQ,eAAeC,QAASW,EAAWV,QAAM,EAAzD,mBAA2D,uBAA3D,iBC4BDY,G,MApCA,SAAClB,GACZ,IAAMmB,EAAWnB,EAAMmB,SAAWnB,EAAMmB,SAAW,GAC7CC,EAAW,CACb,CAAEC,GAAI,EAAGV,KAAOX,EAAMsB,KAAOtB,EAAMsB,KAAO,GAAIpB,UAAY,QAC1D,CAAEmB,GAAI,EAAGV,KAAOX,EAAMuB,KAAOvB,EAAMuB,KAAO,GAAIrB,UAAY,QAC1D,CAAEmB,GAAI,EAAGV,KAAOX,EAAMwB,KAAOxB,EAAMwB,KAAO,GAAItB,UAAY,QAC1D,CAAEmB,GAAI,EAAGV,KAAOX,EAAMyB,KAAOzB,EAAMyB,KAAO,GAAIvB,UAAY,SAExDY,EAAed,EAAMc,QACrBC,EAAef,EAAMe,UACrBH,EAAeZ,EAAMY,aACrBI,EAAehB,EAAMgB,UACrBC,EAAejB,EAAMiB,aAC3B,OACI,qCACI,cAAC,EAAD,CACIH,QAASA,EACTC,UAAWA,EACXC,UAAWA,EACXC,aAAcA,IAElB,qBAAKf,UAAU,WAAf,SAA2BiB,IAEvBC,EAAQM,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,CACIhB,KAAMgB,EAAIhB,KACVT,UAAWyB,EAAIzB,UAEfU,aAAcA,GADTe,EAAIN,Y,OChClBO,ECY0B,SAACC,GACtC,MAAO,CACHC,aAAqB,kBAnBR,SAACD,GAClB,OAAOA,EAAMH,KAAI,SAAAC,GAAG,MAAK,CAAEN,GAAIM,EAAIN,GAAIF,SAAUQ,EAAIR,cAAgB,GAkBtCW,CAAaD,IACxCE,mBAAqB,SAACV,GAAD,OAhBF,SAACQ,EAAOR,GAC/B,IAAMW,EAAeH,EAAMI,MAAK,SAAAN,GAAG,OAAIA,EAAIN,KAAOA,KAElD,GAAIW,GAAiBA,EAAaE,eAIlC,MAAO,CACHpB,QAAckB,EAAaE,eAC3BnB,UAAciB,EAAaG,cAAgBH,EAAaG,cAAgB,IAO3CJ,CAAmBF,EAAOR,KDjBpCe,CAAiCC,GEI7CC,EAJO,CAClBC,aAHiB,SAACC,EAAOC,GAAR,OAAgBC,KAAKC,MAAMD,KAAKE,UAAUH,EAAID,GAASA,KC0BtEK,EAAkB,SAACC,EAAGC,EAAMC,GAG9B,IAFA,IAAMC,EAAgB,GAClBC,EAAI,EACAC,EAAI,EAAGA,EA3BO,EA2BgBA,IAC/BA,IAAML,EACLG,EAAcG,KAAKL,IAEnBE,EAAcG,KAAKJ,EAAWE,IAC9BA,GAAK,GAGb,OAAOD,GA0BII,EANgB,CAC3BC,aAtDiB,WACjB,MAAO,CACHC,UAAY3B,EAAmBE,iBAqDnC0B,gBAnBoB,SAACD,GACrB,IAAMpC,EAAWoC,EAAUjB,EAAcC,aAAa,EAAGgB,EAAUE,SAC7DC,EAAa9B,EAAmBG,mBAAmBZ,EAASE,IAC5DsC,EAjCgB,SAACb,EAAGc,GACvBA,EAAKH,OAASX,IACbA,EAAIc,EAAKH,QAIb,IAFA,IAAMI,EAAS,GACTC,EAAQ,IAAIC,IACZD,EAAME,KAAOlB,GAAE,CACjB,IAAMmB,EAAiBL,EAAKtB,EAAcC,aAAa,EAAGqB,EAAKH,SAC3DK,EAAMI,IAAID,KACVJ,EAAOT,KAAKa,GACZH,EAAMK,IAAIF,IAGlB,OAAOJ,EAoBcO,CAzCC,EAyCoCV,EAAW3C,WAC/DsD,EAAwB/B,EAAcC,aAAa,EA1CnC,GA2CtB,MAAO,CACHlB,GAAWF,EAASE,GACpBF,SAAWA,EAASA,SACpBC,QAAWyB,EAAgBwB,EAAuBX,EAAW5C,QAAS6C,KAY1EW,qBARyB,SAACjD,EAAIwC,GAE9B,OAAOA,IADYjC,EAAmBG,mBAAmBV,GAC5BP,UCelByD,EA7DQ,SAACvE,GACpB,IAAIwE,EAAWC,iBAAO,IAEtB,EAAgCC,mBAAS,GAAzC,mBAAQ5D,EAAR,KAAiB6D,EAAjB,KACA,EAAoCD,mBAAS,GAA7C,mBAAQ3D,EAAR,KAAmB6D,EAAnB,KAEA,EAAsBF,mBAAS,IAA/B,mBAAQrD,EAAR,KAAYwD,EAAZ,KACA,EAAkCH,mBAAS,IAA3C,mBAAQvD,EAAR,KAAkB2D,EAAlB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAQpD,EAAR,KAAcyD,EAAd,KACA,EAA0BL,mBAAS,IAAnC,mBAAQnD,EAAR,KAAcyD,EAAd,KACA,EAA0BN,mBAAS,IAAnC,mBAAQlD,EAAR,KAAcyD,EAAd,KACA,EAA0BP,mBAAS,IAAnC,mBAAQjD,EAAR,KAAcyD,EAAd,KAEMjE,EAAejB,EAAMiB,aAErBkE,EAAmB,WACrB,IAAMC,EAAe/B,EAAuBG,gBAAgBgB,EAASa,QAAQ9B,WAC7EsB,EAAMO,EAAa/D,IACnByD,EAAYM,EAAajE,UACzB4D,EAAQK,EAAahE,QAAQ,IAC7B4D,EAAQI,EAAahE,QAAQ,IAC7B6D,EAAQG,EAAahE,QAAQ,IAC7B8D,EAAQE,EAAahE,QAAQ,KAuBjC,OALAkE,qBAAU,WACNd,EAASa,QAAUhC,EAAuBC,eAC1C6B,MACD,IAGC,cAAC,EAAD,CACIrE,QAASA,EACTC,UAAWA,EACXI,SAAUA,EACVG,KAAMA,EACNC,KAAMA,EACNC,KAAMA,EACNC,KAAMA,EACNb,aA7Ba,SAAC2E,GACAlC,EAAuBiB,qBAAqBjD,EAAIkE,GAE9DZ,EAAW7D,EAAQ,GAEnB8D,EAAa7D,EAAU,GAE3BoE,KAuBInE,UApBU,WACd2D,EAAW,GACXC,EAAa,IAmBT3D,aAAcA,KCnBXuE,EAnCG,SAACxF,GACf,IAAMyF,EAAa,CACf,UAAc,CACVvF,UAAc,sBACdwF,WAAclF,GAElB,KAAc,CACVN,UAAc,iBACdwF,WAAcnB,IAItB,EAA4CG,mBAAS,aAArD,mBAAQiB,EAAR,KAAuBC,EAAvB,KAEM1F,EAAgB,aAAeuF,EAAWE,GAAezF,UACzD2F,EAAgBJ,EAAWE,GAAeD,WAUhD,OACI,qBAAKxF,UAAWA,EAAhB,SACI,cAAC2F,EAAD,CACI5E,aAPS,WACjB2E,EAAiB,cAOTnF,iBAZa,SAACqF,GACtBF,EAAiBE,SCpBVC,EAPH,WAER,OACI,cAAC,EAAD,KCOFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAchB,YAI1ByB,QAAQC,IACN,+GAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFUnB,SAAkB7B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI6B,IAAIC,SAAwBrC,OAAOC,SAASqC,MACpDC,SAAWvC,OAAOC,SAASsC,OAIvC,OAGFvC,OAAOwC,iBAAiB,QAAQ,WAC9B,IAAMnC,EAAK,UAAMgC,SAAN,sBAEPvC,IAgEV,SAAiCO,EAAOC,GAEtCmC,MAAMpC,EAAO,CACXqC,QAAS,CAAE,iBAAkB,YAE5BhC,MAAK,SAACiC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxC,UAAUC,cAAcwC,MAAMtC,MAAK,SAACC,GAClCA,EAAasC,aAAavC,MAAK,WAC7BV,OAAOC,SAASiD,eAKpB9C,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IAAI,oEAtFViC,CAAwB9C,EAAOC,GAI/BC,UAAUC,cAAcwC,MAAMtC,MAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,OEhC/B8C,GAKA7B,K","file":"static/js/main.3fe0da98.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport './MainMenuUI.css';\n\nconst MainMenuUI = (props) => {\n    const switchToGame = props.switchToGame;\n    return (\n        <>\n            <div className=\"flex-grow-1 mode mode1 d-grid p-2\">\n                <Button variant=\"outline-dark\" onClick={switchToGame} active>Kanjis</Button>\n            </div>\n            <div className=\"flex-grow-1 mode mode2 d-grid p-2\">\n                <Button variant=\"outline-dark\" disabled>Forma て<br /><em>(Pr&oacute;ximamente)</em></Button>\n            </div>\n        </>\n    )\n}\n\nexport default MainMenuUI;","import React from 'react';\nimport MainMenuUI from './main_menu/MainMenuUI';\n\nconst MainMenuController = (props) => {\n    const switchToGame = () => props.switchToGameMode(\"game\");\n    return (\n        <MainMenuUI \n            switchToGame={switchToGame}\n        />\n    )\n}\n\nexport default MainMenuController;","import React from 'react';\nimport { Button } from 'react-bootstrap';\n\nconst AnswerUI = (props) => {\n    const className     = props.className ? props.className + \" d-grid p-2 ans\" : \"d-grip p-2 ans\";\n    const text          = props.text;\n    const submitAnswer  = () => props.submitAnswer(text);\n    return (\n        <div className={className}>\n            <Button variant=\"outline-dark\" onClick={submitAnswer} active>{text}</Button>\n        </div>\n    )\n}\n\nexport default AnswerUI;","import { Button } from 'react-bootstrap';\nimport React from 'react';\n\nconst MenuUI = (props) => {\n    const correct      = props.correct ? props.correct : 0;\n    const incorrect    = props.incorrect ? props.incorrect : 0;\n    const resetGame    = props.resetGame;\n    const returnToMenu = props.returnToMenu;\n    return (\n        <div className=\"menu d-flex\">\n            <div className=\"flex-grow-1 flex-basis-0 px-2\">\n                <Button variant=\"outline-dark\" onClick={returnToMenu} active>←<br />Volver</Button>\n            </div>\n            <div className=\"d-flex flex-grow-1\">\n                <div className=\"flex-grow-1 px-1\"><div className=\"alert alert-success text-center\">Bien<br />{correct}</div></div>\n                <div className=\"flex-grow-1 px-1\"><div className=\"alert alert-danger text-center\">Mal<br />{incorrect}</div></div>\n            </div>\n            <div className=\"flex-grow-1 d-flex justify-content-end align-items-start flex-basis-0 px-2\">\n                <Button variant=\"outline-dark\" onClick={resetGame} active>⟲<br />Reset</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default MenuUI;","// From packages\nimport React from 'react';\n\n// Proyect components\nimport AnswerUI from './AnswerUI';\nimport MenuUI from './MenuUI';\n\n// Style files\nimport './GameUI.css';\n\nconst GameUI = (props) => {\n    const question = props.question ? props.question : \"\";\n    const answers  = [\n        { id: 1, text : props.ans1 ? props.ans1 : \"\", className : \"ans1\" }, \n        { id: 2, text : props.ans2 ? props.ans2 : \"\", className : \"ans2\" }, \n        { id: 3, text : props.ans3 ? props.ans3 : \"\", className : \"ans3\" }, \n        { id: 4, text : props.ans4 ? props.ans4 : \"\", className : \"ans4\" }, \n    ]\n    const correct      = props.correct;\n    const incorrect    = props.incorrect;\n    const submitAnswer = props.submitAnswer;\n    const resetGame    = props.resetGame;\n    const returnToMenu = props.returnToMenu;\n    return (\n        <>\n            <MenuUI \n                correct={correct} \n                incorrect={incorrect}\n                resetGame={resetGame}\n                returnToMenu={returnToMenu}\n            />\n            <div className=\"question\">{question}</div>\n            {\n                answers.map(ans => (\n                    <AnswerUI \n                        text={ans.text} \n                        className={ans.className} \n                        key={ans.id}\n                        submitAnswer={submitAnswer}\n                    />\n                ))\n            }\n        </>\n    )\n}\n\nexport default GameUI;","import KanjiToHiragana from '../store/kanji_to_hiragana.json';\nimport _QuestionsWithPossibleAnswersDAO from './_QuestionsWithPossibleAnswersDAO';\n\nconst KanjiToHiraganaDAO = _QuestionsWithPossibleAnswersDAO(KanjiToHiragana);\n\nexport default KanjiToHiraganaDAO;","const getQuestions = (store) => {\n    return store.map(ans => ({ id: ans.id, question: ans.question })) || [];\n}\n\nconst getPossibleAnswers = (store, id) => {\n    const answerObject = store.find(ans => ans.id === id);\n\n    if(!answerObject || !answerObject.correct_answer){\n        return undefined;\n    }\n\n    return {\n        correct     : answerObject.correct_answer,\n        incorrect   : answerObject.other_answers ? answerObject.other_answers : []\n    }\n}\n\nconst _QuestionsWithPossibleAnswersDAO = (store) => {\n    return {\n        getQuestions       : () => getQuestions(store),\n        getPossibleAnswers : (id) => getPossibleAnswers(store, id)\n    }\n}\n\nexport default _QuestionsWithPossibleAnswersDAO;","\nconst getRandomInt = (start, end) => Math.floor(Math.random()*(end-start) + start)\n\nconst RandomService = {\n    getRandomInt\n}\n\nexport default RandomService;","import KanjiToHiraganaDAO from \"../data/access/KanjiToHiraganaDAO\";\nimport RandomService from \"./RandomService\";\n\nconst NUMBER_OF_ANSWERS = 4;\n\nconst startNewGame = () => {\n    return {\n        questions : KanjiToHiraganaDAO.getQuestions()\n    }\n}\n\nconst getXDifferentFrom = (x, from) => {\n    if(from.length < x){\n        x = from.length;\n    }\n    const answer = [];\n    const taken = new Set();\n    while(taken.size < x){\n        const possibleAnswer = from[RandomService.getRandomInt(0, from.length)];\n        if(!taken.has(possibleAnswer)){\n            answer.push(possibleAnswer)\n            taken.add(possibleAnswer);\n        }\n    }\n    return answer;\n}\n\nconst withInPositionX = (x, what, collection) => {\n    const newCollection = [];\n    let j = 0;\n    for(let i = 0; i < NUMBER_OF_ANSWERS; i++){\n        if(i === x){\n            newCollection.push(what);\n        } else {\n            newCollection.push(collection[j]);\n            j += 1;\n        }\n    }\n    return newCollection;\n}\n\nconst getNextQuestion = (questions) => {\n    const question = questions[RandomService.getRandomInt(0, questions.length)];\n    const answerData = KanjiToHiraganaDAO.getPossibleAnswers(question.id);\n    const wrongAnswers = getXDifferentFrom(NUMBER_OF_ANSWERS, answerData.incorrect);\n    const correctAnswerPosition = RandomService.getRandomInt(0, NUMBER_OF_ANSWERS);\n    return {\n        id       : question.id,\n        question : question.question,\n        answers  : withInPositionX(correctAnswerPosition, answerData.correct, wrongAnswers)\n    };\n}\n\nconst checkIfCorrectAnswer = (id, answer) => {\n    const answerData = KanjiToHiraganaDAO.getPossibleAnswers(id);\n    return answer === answerData.correct;\n}\n\nconst KanjiToHiraganaService = {\n    startNewGame,\n    getNextQuestion,\n    checkIfCorrectAnswer\n}\n\nexport default KanjiToHiraganaService;","// From packages\nimport React, { useEffect, useState, useRef } from 'react';\n\n// Proyect components\nimport GameUI from './game/GameUI';\n\n// Services\nimport KanjiToHiraganaService from '../logic/KanjiToHiraganaService';\n\nconst GameController = (props) => {\n    let gameData = useRef({});\n\n    const [ correct, setCorrect ] = useState(0);\n    const [ incorrect, setIncorrect ] = useState(0);\n\n    const [ id, setId ] = useState(\"\");\n    const [ question, setQuestion ] = useState(\"\");\n    const [ ans1, setAns1 ] = useState(\"\");\n    const [ ans2, setAns2 ] = useState(\"\");\n    const [ ans3, setAns3 ] = useState(\"\");\n    const [ ans4, setAns4 ] = useState(\"\");\n\n    const returnToMenu = props.returnToMenu;\n\n    const loadNextQuestion = () => {\n        const nextQuestion = KanjiToHiraganaService.getNextQuestion(gameData.current.questions);\n        setId(nextQuestion.id);\n        setQuestion(nextQuestion.question);\n        setAns1(nextQuestion.answers[0]);\n        setAns2(nextQuestion.answers[1]);\n        setAns3(nextQuestion.answers[2]);\n        setAns4(nextQuestion.answers[3])\n    }\n\n    const submitAnswer = (selectedAns) => {\n        const isCorrect = KanjiToHiraganaService.checkIfCorrectAnswer(id, selectedAns);\n        if(isCorrect){\n            setCorrect(correct+1);\n        } else {\n            setIncorrect(incorrect+1);\n        }\n        loadNextQuestion();\n    }\n\n    const resetGame = () => {\n        setCorrect(0);\n        setIncorrect(0);\n    }\n\n    useEffect(() => {\n        gameData.current = KanjiToHiraganaService.startNewGame();\n        loadNextQuestion()\n    }, []);\n\n    return (\n        <GameUI \n            correct={correct} \n            incorrect={incorrect}\n            question={question} \n            ans1={ans1} \n            ans2={ans2} \n            ans3={ans3} \n            ans4={ans4} \n            submitAnswer={submitAnswer}\n            resetGame={resetGame}\n            returnToMenu={returnToMenu}\n        />\n    )\n}\n\nexport default GameController;","// From packages\nimport React, { useState } from 'react';\n\n// Style files\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Interface.css';\n\n// Controllers\nimport MainMenuController from './MainMenuController';\nimport GameController from './GameController';\n\nconst Interface = (props) => {\n    const interfaces = {\n        \"main_menu\" : {\n            className   : \"main-menu-interface\",\n            controller  : MainMenuController\n        },\n        \"game\"      : {\n            className   : \"game-interface\",\n            controller  : GameController\n        }\n    }\n\n    const [ currInterface, setCurrInterface ] = useState(\"main_menu\");\n\n    const className     = \"interface \" + interfaces[currInterface].className;\n    const Controller    = interfaces[currInterface].controller\n\n    const switchToGameMode = (gameMode) => {\n        setCurrInterface(gameMode);\n    }\n\n    const returnToMenu = () => {\n        setCurrInterface(\"main_menu\");\n    }\n\n    return (\n        <div className={className}>\n            <Controller \n                returnToMenu={returnToMenu}\n                switchToGameMode={switchToGameMode}\n            />\n        </div>\n    )\n}\n\nexport default Interface;","import Interface from './UI/Interface';\n\nconst App = () => {\n\n    return (\n        <Interface />\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}