{"version":3,"sources":["data/KanjiToHiraganaDAO.js","logic/RandomService.js","logic/KanjiToHiraganaService.js","UI/AnswerUI.js","UI/MenuUI.js","UI/Interface.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["KanjiToHiraganaDAO","getQuestions","KanjiToHiragana","map","ans","question","getPossibleAnswers","answerObject","find","correct_answer","correct","incorrect","other_answers","RandomService","getRandomInt","start","end","Math","floor","random","withInPositionX","x","what","collection","newCollection","j","i","push","KanjiToHiraganaService","startNewGame","questions","getNextQuestion","length","answerData","wrongAnswers","from","answer","taken","Set","size","possibleAnswer","has","add","getXDifferentFrom","correctAnswerPosition","answers","checkIfCorrectAnswer","AnswerUI","props","className","text","Button","variant","onClick","submitAnswer","active","MenuUI","resetGame","Interface","id","ans1","ans2","ans3","ans4","App","gameData","useRef","useState","setCorrect","setIncorrect","setQuestion","setAns1","setAns2","setAns3","setAns4","loadNextQuestion","nextQuestion","current","useEffect","selectedAns","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f59aefc8.chunk.js","sourcesContent":["import KanjiToHiragana from './kanji_to_hiragana.json';\n\nconst getQuestions = () => {\n    return KanjiToHiragana.map(ans => ans.question) || [];\n}\n\nconst getPossibleAnswers = (question) => {\n    const answerObject = KanjiToHiragana.find(ans => ans.question === question);\n\n    if(!answerObject || !answerObject.correct_answer){\n        return undefined;\n    }\n\n    return {\n        correct     : answerObject.correct_answer,\n        incorrect   : answerObject.other_answers ? answerObject.other_answers : []\n    }\n}\n\nconst KanjiToHiraganaDAO = {\n    getQuestions,\n    getPossibleAnswers\n}\n\nexport default KanjiToHiraganaDAO;","\nconst getRandomInt = (start, end) => Math.floor(Math.random()*(end-start) + start)\n\nconst RandomService = {\n    getRandomInt\n}\n\nexport default RandomService;","import KanjiToHiraganaDAO from \"../data/KanjiToHiraganaDAO\";\nimport RandomService from \"./RandomService\";\n\nconst NUMBER_OF_ANSWERS = 4;\n\nconst startNewGame = () => {\n    return {\n        questions : KanjiToHiraganaDAO.getQuestions()\n    }\n}\n\nconst getXDifferentFrom = (x, from) => {\n    if(from.length < x){\n        x = from.length;\n    }\n    const answer = [];\n    const taken = new Set();\n    while(taken.size < x){\n        const possibleAnswer = from[RandomService.getRandomInt(0, from.length)];\n        if(!taken.has(possibleAnswer)){\n            answer.push(possibleAnswer)\n            taken.add(possibleAnswer);\n        }\n    }\n    return answer;\n}\n\nconst withInPositionX = (x, what, collection) => {\n    const newCollection = [];\n    let j = 0;\n    for(let i = 0; i < NUMBER_OF_ANSWERS; i++){\n        if(i === x){\n            newCollection.push(what);\n        } else {\n            newCollection.push(collection[j]);\n            j += 1;\n        }\n    }\n    return newCollection;\n}\n\nconst getNextQuestion = (questions) => {\n    const question = questions[RandomService.getRandomInt(0, questions.length)];\n    const answerData = KanjiToHiraganaDAO.getPossibleAnswers(question);\n    const wrongAnswers = getXDifferentFrom(NUMBER_OF_ANSWERS, answerData.incorrect);\n    const correctAnswerPosition = RandomService.getRandomInt(0, NUMBER_OF_ANSWERS);\n    return {\n        question,\n        answers: withInPositionX(correctAnswerPosition, answerData.correct, wrongAnswers)\n    };\n}\n\nconst checkIfCorrectAnswer = (question, answer) => {\n    const answerData = KanjiToHiraganaDAO.getPossibleAnswers(question);\n    return answer === answerData.correct;\n}\n\nconst KanjiToHiraganaService = {\n    startNewGame,\n    getNextQuestion,\n    checkIfCorrectAnswer\n}\n\nexport default KanjiToHiraganaService;","import React from 'react';\nimport {Button} from 'react-bootstrap';\n\nconst AnswerUI = (props) => {\n    const className     = props.className ? props.className + \" d-grid p-2 ans\" : \"d-grip p-2 ans\";\n    const text          = props.text;\n    const submitAnswer  = () => props.submitAnswer(text);\n    return (\n        <div className={className}>\n            <Button variant=\"outline-dark\" className=\"display-2\" onClick={submitAnswer} active>{text}</Button>\n        </div>\n    )\n}\n\nexport default AnswerUI;","import { Button } from 'react-bootstrap';\nimport React from 'react';\n\nconst MenuUI = (props) => {\n    const correct   = props.correct ? props.correct : 0;\n    const incorrect = props.incorrect ? props.incorrect : 0;\n    const resetGame = props.resetGame;\n    return (\n        <div className=\"menu d-flex\">\n            <div className=\"flex-grow-1 flex-basis-0\"></div>\n            <div className=\"d-flex\">\n                <div className=\"flex-grow-1 px-1\"><div className=\"alert alert-success\">○ Bien: {correct}</div></div>\n                <div className=\"flex-grow-1 px-1\"><div className=\"alert alert-danger\">× Mal: {incorrect}</div></div>\n            </div>\n            <div className=\"flex-grow-1 d-flex justify-content-end align-items-start flex-basis-0 px-2\">\n                <Button variant=\"outline-dark\" onClick={resetGame} active>⟲ Reset</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default MenuUI;","import React from 'react';\nimport './Interface.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AnswerUI from './AnswerUI';\nimport MenuUI from './MenuUI';\n\nconst Interface = (props) => {\n    const question = props.question ? props.question : \"\";\n    const answers = [\n        { id: 1, text : props.ans1 ? props.ans1 : \"\", className : \"ans1\" }, \n        { id: 2, text : props.ans2 ? props.ans2 : \"\", className : \"ans2\" }, \n        { id: 3, text : props.ans3 ? props.ans3 : \"\", className : \"ans3\" }, \n        { id: 4, text : props.ans4 ? props.ans4 : \"\", className : \"ans4\" }, \n    ]\n    const correct      = props.correct;\n    const incorrect    = props.incorrect;\n    const submitAnswer = props.submitAnswer;\n    const resetGame    = props.resetGame;\n    return (\n        <div className=\"interface\">\n            <MenuUI \n                correct={correct} \n                incorrect={incorrect}\n                resetGame={resetGame}\n            />\n            <div className=\"question\">{question}</div>\n            {\n                answers.map(ans => (\n                    <AnswerUI \n                        text={ans.text} \n                        className={ans.className} \n                        key={ans.id} \n                        submitAnswer={submitAnswer}\n                    />\n                ))\n            }\n        </div>\n    )\n}\n\nexport default Interface;","import React, { useEffect, useState, useRef } from 'react';\nimport KanjiToHiraganaService from './logic/KanjiToHiraganaService';\n\nimport Interface from './UI/Interface';\n\nconst App = () => {\n    let gameData = useRef({});\n\n    const [ correct, setCorrect ] = useState(0);\n    const [ incorrect, setIncorrect ] = useState(0);\n\n    const [ question, setQuestion ] = useState(\"\");\n    const [ ans1, setAns1 ] = useState(\"\");\n    const [ ans2, setAns2 ] = useState(\"\");\n    const [ ans3, setAns3 ] = useState(\"\");\n    const [ ans4, setAns4 ] = useState(\"\");\n\n    const loadNextQuestion = () => {\n        const nextQuestion = KanjiToHiraganaService.getNextQuestion(gameData.current.questions);\n        setQuestion(nextQuestion.question);\n        setAns1(nextQuestion.answers[0]);\n        setAns2(nextQuestion.answers[1]);\n        setAns3(nextQuestion.answers[2]);\n        setAns4(nextQuestion.answers[3])\n    }\n\n    const submitAnswer = (selectedAns) => {\n        const isCorrect = KanjiToHiraganaService.checkIfCorrectAnswer(question, selectedAns);\n        if(isCorrect){\n            setCorrect(correct+1);\n        } else {\n            setIncorrect(incorrect+1);\n        }\n        loadNextQuestion();\n    }\n\n    const resetGame = () => {\n        setCorrect(0);\n        setIncorrect(0);\n    }\n\n    useEffect(() => {\n        gameData.current = KanjiToHiraganaService.startNewGame();\n        loadNextQuestion()\n    }, []);\n\n    return (\n        <Interface \n            correct={correct} \n            incorrect={incorrect} \n            question={question} \n            ans1={ans1} \n            ans2={ans2} \n            ans3={ans3} \n            ans4={ans4} \n            submitAnswer={submitAnswer}\n            resetGame={resetGame}\n        />\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}